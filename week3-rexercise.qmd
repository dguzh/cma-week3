---
title: "week3-rexercise"
format: html
editor: visual
---

## Sabi Demo

```{r}
library('readr')
library('dplyr')
library('ggplot2')

wildschwein <- read_csv('data/wildschwein_BE_2056.csv')

sabi <- wildschwein |>
  filter(TierName == 'Sabi') |>
  filter(DatetimeUTC >= as.POSIXct('2015-07-01', tz = 'UTC'), DatetimeUTC < as.POSIXct('2015-07-03', tz = 'UTC'))

sabi <- sabi |>
    mutate(
        nMinus2 = sqrt((lag(E, 2) - E)^2 + (lag(N, 2) - N)^2), # distance to pos -30 minutes
        nMinus1 = sqrt((lag(E, 1) - E)^2 + (lag(N, 1) - N)^2), # distance to pos -15 minutes
        nPlus1  = sqrt((E - lead(E, 1))^2 + (N - lead(N, 1))^2), # distance to pos +15 mintues
        nPlus2  = sqrt((E - lead(E, 2))^2 + (N - lead(N, 2))^2) # distance to pos +30 minutes
    )

sabi <- sabi |>
    rowwise() |>
    mutate(
        stepMean = mean(c(nMinus2, nMinus1, nPlus1, nPlus2))
    ) |>
    ungroup()

sabi <- sabi |>
    ungroup() |>
    mutate(static = stepMean < mean(stepMean, na.rm = TRUE))

sabi_filter <- sabi |>
    filter(!static)

sabi_filter |>
    ggplot(aes(E, N)) +
    geom_path() +
    geom_point() +
    coord_fixed() +
    theme(legend.position = "bottom")
```

## Preperation

```{r}
library("readr")
library("sf")

posmo <- read_delim("data/posmo_2023-01-01T00_00_00+01_00-2023-05-04T23_59_59+02_00.csv")

# Keep only the necessary columns
posmo <- select(posmo, datetime, lon_x, lat_y)

posmo <- st_as_sf(posmo, coords = c("lon_x","lat_y"), crs = 4326) |>
  st_transform(2056)

posmo_coordinates <- st_coordinates(posmo)

posmo <- cbind(posmo, posmo_coordinates)

posmo <- posmo |>
    filter(as.Date(datetime) == "2023-04-21")
```

## Task 1

```{r}
posmo <- posmo |>
    mutate(
        nMinus2 = sqrt((lag(X, 2) - X)^2 + (lag(Y, 2) - Y)^2),
        nMinus1 = sqrt((lag(X, 1) - X)^2 + (lag(Y, 1) - Y)^2),
        nPlus1  = sqrt((X - lead(X, 1))^2 + (Y - lead(Y, 1))^2),
        nPlus2  = sqrt((X - lead(X, 2))^2 + (Y - lead(Y, 2))^2)
    )

posmo <- posmo |>
    rowwise() |>
    mutate(
        stepMean = mean(c(nMinus2, nMinus1, nPlus1, nPlus2))
    ) |>
    ungroup()

posmo <- posmo |>
    ungroup() |>
    mutate(static = stepMean < mean(stepMean, na.rm = TRUE))

posmo_filter <- posmo |>
    filter(!static)

posmo_filter |>
    ggplot(aes(X, Y)) +
    geom_path() +
    geom_point() +
    coord_fixed() +
    theme(legend.position = "bottom")
```

## Task 2

```{r}
# this is what we did with Sabi, which is why I implemented it in task 1 already;
# here I copy the code from above, because for some reason it is asked for again in task 2
posmo <- posmo |>
    ungroup() |>
    mutate(static = stepMean < mean(stepMean, na.rm = TRUE))
```

## Task 3

```{r}
posmo |>
    ggplot(aes(X, Y, color = static)) +
    geom_path() +
    geom_point() +
    coord_equal()
```

## Task 4

```{r}
rle_id <- function(vec) {
    x <- rle(vec)$lengths
    as.factor(rep(seq_along(x), times = x))
}

posmo <- posmo |>
    mutate(segment_id = rle_id(static))

posmo |>
    ggplot(aes(X, Y, color = segment_id)) +
    geom_path() +
    geom_point() +
    coord_equal() +
    labs(title = "All Segments")

posmo <- posmo |>
  group_by(segment_id) |>
  mutate(duration = max(datetime) - min(datetime))

posmo |>
    filter(duration >= as.difftime(5, units = "mins")) |>
    ggplot(aes(X, Y, color = segment_id)) +
    geom_path() +
    geom_point() +
    coord_equal() +
    labs(title = "Long Segments (> 5 Minutes)")
```

## Task 5

```{r}
pedestrian <- read_csv("data/pedestrian.csv")

pedestrian |>
  ggplot(aes(E, N, color = factor(TrajID))) +
  geom_path() +
  geom_point() +
  facet_wrap(~ TrajID) +
  coord_equal()
```

## Task 6

```{r}
# First thoughts:
# 1 & 6 look pretty much identical, even with same spacings between fixes.
# If we only consider the general shape, we can say that 1, 2, 3 & 6 all look similar
# to each other. 5 could also be considered similar, but has one outlier far off the
# path that all others have. 6 is the only one, that looks distinctly different to the others.

library(SimilarityMeasures)

# create a list of data frames, one for each trajectory
trajectories <- split(pedestrian, pedestrian$TrajID)

# turn each of the data frames into a matrix
trajectories <- lapply(trajectories, function(df) as.matrix(df[, c("E", "N")]))

# compute the similarity metric between trajectory 1 and each of the other trajectories (except 1)
similarities_DTW <- sapply(trajectories[-1], function(traj) DTW(trajectories[[1]], traj))
similarities_EditDist <- sapply(trajectories[-1], function(traj) EditDist(trajectories[[1]], traj))
similarities_Frechet  <- sapply(trajectories[-1], function(traj) Frechet(trajectories[[1]], traj))
similarities_LCSS <- sapply(trajectories[-1], function(traj) {LCSS(trajectories[[1]], traj, pointSpacing = 5, pointDistance = 5, errorMarg = 0.5)})

# turn results into data frames
df_DTW <- data.frame(Trajectory = names(similarities_DTW), Similarity = similarities_DTW, Measure = "DTW")
df_EditDist <- data.frame(Trajectory = names(similarities_EditDist), Similarity = similarities_EditDist, Measure = "EditDist")
df_Frechet <- data.frame(Trajectory = names(similarities_Frechet), Similarity = similarities_Frechet, Measure = "Frechet")
df_LCSS <- data.frame(Trajectory = names(similarities_LCSS), Similarity = similarities_LCSS, Measure = "LCSS")

# merge data frames
df_similarities <- bind_rows(df_DTW, df_EditDist, df_Frechet, df_LCSS)

# plot
ggplot(df_similarities, aes(x = Trajectory, y = Similarity, fill = Trajectory)) +
  geom_bar(stat = "identity") +
  facet_wrap(~ Measure, scales = "free") +
  labs(x = "Trajectory", y = "Similarity", title = "Similarity Measures of Trajectories 2-6 to Trajectory 1") +
  theme(legend.position = "none")
```
